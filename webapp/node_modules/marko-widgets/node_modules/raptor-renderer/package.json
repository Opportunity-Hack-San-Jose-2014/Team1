{
  "name": "raptor-renderer",
  "description": "Helper module to invoke renderers",
  "repository": {
    "type": "git",
    "url": "https://github.com/raptorjs/raptor-renderer.git"
  },
  "scripts": {
    "test": "mocha --ui bdd --reporter spec  ./test"
  },
  "author": {
    "name": "Patrick Steele-Idem",
    "email": "pnidem@gmail.com"
  },
  "maintainers": "Patrick Steele-Idem <pnidem@gmail.com>",
  "dependencies": {
    "async-writer": "^1.1.0",
    "raptor-dom": "^1.0.0",
    "raptor-pubsub": "^1.0.2",
    "raptor-util": "^1.0.0"
  },
  "devDependencies": {
    "mocha": "~1.15.1",
    "chai": "~1.8.1"
  },
  "license": "Apache License v2.0",
  "bin": {},
  "main": "lib/raptor-renderer.js",
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "browser": {
    "./lib/RenderResult.js": "./lib/RenderResult-browser.js"
  },
  "version": "1.1.10",
  "readme": "raptor-renderer\n===============\n\nThis module provides support for rendering UI components and templates and provides helper methods for injecting the resulting HTML into the DOM _and_ binding behavior.\n\nIn the browser, this module allows behavior to be attached by publishing a `raptor-renderer/renderedToDOM` message via the [raptor-pubsub](https://github.com/raptorjs/raptor-pubsub) module when the newly rendered DOM nodes have been inserted into the DOM. The [marko-widgets](https://github.com/raptorjs/marko-widgets) module listens for this event to initialize all widgets that were rendered. Internally, the list of rendered widgets is stored in the [async-writer](https://github.com/raptorjs/async-writer) instance (specifically `out.global.widgets`) that is passed to all renderers during the rendering process.\n\n# Installation\n\n```bash\nnpm install raptor-renderer --save\n```\n\n# Usage\n\n```javascript\nvar raptorRenderer = require('raptor-renderer');\n\nvar renderer = function(input, out) {\n    out.write('Hello ' + input.name + '!');\n}\n\nvar targetEl = document.getElementById('myRenderTarget');\n\nraptorRenderer.render(\n    renderer,       // function renderer(input, out)\n    {               // View model\n        name: 'Frank'\n    },\n    function(err, renderResult) {\n        if (err) {\n            // Handle the error\n        }\n\n        // Append the HTML as a child of the provided target element\n        renderResult.appendTo(targetEl);\n\n        // Behavior (if any) has been attached automagically. Yay!\n\n        // All available methods\n        // - appendTo(el)\n        // - replace(el)\n        // - replaceChildrenOf(el)\n        // - insertBefore(el)\n        // - insertAfter(el)\n        // - prependTo(el)\n    });\n```\n\nIf you know for sure that the rendering will complete synchronously then you can instead use the synchronous API by not providing a callback function:\n\n```javascript\nvar raptorRenderer = require('raptor-renderer');\n\nvar renderer = function(input, out) {\n    out.write('Hello ' + input.name + '!');\n}\n\nvar targetEl = document.getElementById('myRenderTarget');\n\nvar renderResult = raptorRenderer.render(\n    renderer,       // function renderer(input, out)\n    {               // View model\n        name: 'Frank'\n    });\n\nrenderResult.appendTo(targetEl);\n```\n\n# API\n\n## render(renderer, data, callback)\n\nInvokes a renderer with the provided data and invokes the provided callback when the rendering asynchronously completes. The signature for the callback function is `function(err, renderResult)` where `renderResult` will be an instance of `RenderResult` (see below).\n\n\n## render(renderer, data) : RenderResult\n\nSynchronous version of the `render` method that immediately returns a `RenderResult` object.\n\n## RenderResult\n\n### Methods\n\n#### appendTo(el)\n\nInserts the newly rendered DOM nodes as ending children of the target HTML element.\n\n#### getWidget()\n\nReturns the top-level widget (if any) associated with the rendered HTML. This method can only be called after the HTML has been inserted into the DOM (e.g. using `appendTo(document.body)`);\n\nExample:\n\n```javascript\nvar buttonWidget = require('raptor-renderer').render(\n    buttonRenderer,\n    {\n        label: label\n    })\n    .appendTo(document.body)\n    .getWidget();\n\nbuttonWidget.disable();\n```\n\n#### getWidgets()\n\nReturns an array of all of the rendered widgets;\n\n#### insertAfter(el)\n\nInserts the newly rendered DOM nodes as siblings immediately _after_ the target HTML element.\n\n#### insertBefore(el)\n\nInserts the newly rendered DOM nodes as siblings immediately _before_ the target HTML element.\n\n#### prependTo(el)\n\nInserts the newly rendered DOM nodes as beginning children of the target HTML element.\n\n#### replace(el)\n\nRemoves the target element and replaces is with the newly rendered DOM nodes.\n\n#### replaceChildrenOf(el)\n\nRemoves the child nodes of the target element and replaces them with the newly rendered DOM nodes.\n\n#### toString()\n\nReturs the output HTML string.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/raptorjs/raptor-renderer/issues"
  },
  "homepage": "https://github.com/raptorjs/raptor-renderer",
  "_id": "raptor-renderer@1.1.10",
  "dist": {
    "shasum": "3bad69aa5892660242b9eb7426c30b5345b73338"
  },
  "_from": "raptor-renderer@^1.1.1",
  "_resolved": "http://registry.npmjs.org/raptor-renderer/-/raptor-renderer-1.1.10.tgz"
}
