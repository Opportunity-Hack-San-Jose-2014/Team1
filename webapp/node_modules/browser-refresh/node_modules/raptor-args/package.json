{
  "name": "raptor-args",
  "description": "A concise command line arguments parser with robust type handling",
  "keywords": [
    "argument",
    "args",
    "option",
    "parser",
    "parsing",
    "cli",
    "command"
  ],
  "homepage": "https://github.com/raptorjs/raptor-args",
  "repository": {
    "type": "git",
    "url": "https://github.com/raptorjs/raptor-args.git"
  },
  "scripts": {
    "test": "mocha --ui bdd --reporter spec ./test && node_modules/.bin/jshint lib"
  },
  "author": {
    "name": "Patrick Steele-Idem",
    "email": "pnidem@gmail.com"
  },
  "contributors": [
    {
      "name": "Patrick Steele-Idem",
      "email": "pnidem@gmail.com"
    },
    {
      "name": "Phillip Gates-Idem",
      "email": "phillip.idem@gmail.com"
    }
  ],
  "maintainers": "Patrick Steele-Idem <pnidem@gmail.com>",
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.15.1",
    "chai": "~1.8.1",
    "jshint": "^2.4.4"
  },
  "license": "MIT",
  "bin": {},
  "main": "lib/raptor-args.js",
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "version": "1.0.2",
  "readme": "raptor-args\n===========\nA flexible and simple command line arguments parser that generates friendly help messages.\n\n# Installation\n```bash\nnpm install raptor-args --save\n```\n\n# Usage\n\n```javascript\n// Create a parser:\nvar parser = require('raptor-args').createParser(options);\nvar parsed = parser.parse(argsArray);\n\n// parsed will be an object with properties corresponding to provided arguments\n```\n\n## Simple Example\n\nParse arguments provided by `process.argv`:\n\nGiven the following JavaScript code to parse the args:\n```javascript\n// Create a parser and parse process.argv\nrequire('raptor-args').createParser({\n        '--foo -f': 'boolean',\n        '--bar -b': 'string'\n    })\n    .parse();\n```\n\nAnd the following command:\n```bash\nnode app.js --foo -b b\n```\n\nThe output will be:\n\n```javascript\n//Output:\n{\n    foo: true,\n    bar: 'baz'\n}\n```\n\nYou can also parse your own array of arguments instead of using `process.argv`:\n\n```javascript\n// Create a parser and parse provided args\nrequire('raptor-args').createParser({\n        '--foo -f': 'boolean',\n        '--bar -b': 'string'\n    })\n    .parse(['--foo', '-b', 'baz']);\n\n//Output:\n{\n    foo: true,\n    bar: 'baz'\n}\n```\n\nYou can also be more descriptive and add usage, examples, error handlers and validation checks:\n```javascript\n// Create a parser:\nrequire('raptor-args')\n    .createParser({\n        '--help': {\n            type: 'string',\n            description: 'Show this help message'\n        },\n        '--foo -f': {\n            type: 'string',\n            description: 'Some helpful description for \"foo\"'\n        },\n        '--bar -b': {\n            type: 'string',\n            description: 'Some helpful description for \"bar\"'\n        }\n    })\n    .usage('Usage: $0 [options]')\n    .example(\n        'First example',\n        '$0 --foo hello')\n    .example(\n        'Second example',\n        '$0 --foo hello --bar world')\n    .validate(function(result) {\n        if (result.help) {\n            this.printUsage();\n            process.exit(0);\n        }\n\n        if (!result.foo || !result.bar) {\n            this.printUsage();\n            console.log('--foo or --bar is required');\n            process.exit(1);\n        }\n    })\n    .onError(function(err) {\n        this.printUsage();\n        console.error(err);\n        process.exit(1);\n    })\n    .parse();\n```\n\nRunning the above program with the `--help` argument will produce the following output:\n\n```\nUsage: args [options]\n\nExamples:\n\n  First example:\n     args --foo hello\n\n  Second example:\n     args --foo hello --bar world\n\nOptions:\n\n  --help Show this help message [string]\n\n--foo -f Some helpful description for \"foo\" [string]\n\n--bar -b Some helpful description for \"bar\" [string]\n```\n\n\n## Aliases\n\nAliases can be provided as space-separated values for an option:\n```javascript\n// Create a parser:\nvar parser = require('raptor-args').createParser({\n    '--foobar --foo -f': 'string', // \"--foobar\" has two aliases: \"--foo\" and \"-f\"\n    '--hello -h': 'string',        // \"--hello\" has one alias: \"-h\"\n});\n\nparser.parse('--foo FOO -h HELLO'.split(' '));\n// Output:\n{\n    foobar: 'FOO',\n    hello: 'HELLO'\n}\n\n// **NOTE**: Only the first entry is used to determine the target property name--not the aliases.\n```\n\n## Booleans\n\nAn argument value of \"true\" or \"false\" is automatically converted to the corresponding boolean type. If a argument is prefixed with \"no-\" then it will be set to `false`.\n\n```javascript\n// Create a parser:\nvar parser = require('raptor-args').createParser({\n    '--foo': 'boolean',\n    '--bar': 'boolean'\n});\n\nparser.parse('--foo --no-bar'.split(' '));\n// Output:\n{\n    foo: true,\n    bar: false\n}\n```\n\n## Arrays\n\nAny argument with multiple values will result in an `Array` value, but if you want to force an array for a single value then you can append \"[]\" to the option type as shown in the following sample code:\n```javascript\n// Create a parser:\nvar parser = require('raptor-args').createParser({\n    '--foo': 'string[]'\n});\n\nparser.parse('--foo a'.split(' '));\n// Output:\n{\n    foo: ['a']\n}\n\nparser.parse('--foo a b c'.split(' '));\n// Output:\n{\n    foo: ['a', 'b', 'c']\n}\n```\n\n## Wildcards\n\nA parser will throw an error for unrecognized arguments unless wildcards are used as shown in the examples below.\n\n```javascript\n// Create a parser:\nvar parser = require('raptor-args').createParser({\n    '--foo -f *': 'string[]' // Any unrecognized argument at the beginning is an alias for \"foo\"\n});\n\nparser.parse('a b --foo c'.split(' '));\n// Output:\n{\n    foo: ['a', 'b', 'c']\n}\n```\n\n```javascript\n// Create a parser:\nvar parser = require('raptor-args').createParser({\n    '*': null\n});\n\nparser.parse('a b --foo FOO --bar BAR'.split(' '));\n// Output:\n{\n    '*': ['a', 'b'],\n    foo: 'FOO',\n    bar: 'BAR'\n}\n```\n\n## Complex Types\n\nSquare brackets can be used to begin and end complex types:\n\n```javascript\n// Create a parser:\nvar parser = require('raptor-args').createParser({\n    '--foo -f': 'boolean',\n    '--plugins --plugin -p': {\n        options: {\n            '--module -m *': 'string',\n            '-*': null\n        }\n    }\n});\n\nvar parsed = parser.parse('--foo --plugins [ --module plugin1 -x -y ] [ plugin2 -z Hello ]'.split(' '));\n\n// Output:\n{\n    foo: true,\n    plugins: [\n        {\n            module: 'plugin1',\n            x: true,\n            y: true\n        },\n        {\n            module: 'plugin2',\n            z: 'Hello'\n        }\n    ]\n}\n```\n\n\n# Similar Projects\n\n* [optimist](https://github.com/substack/node-optimist) - Popular but deprecated. Awkward API and not DRY as shown in the following comparison:\n\n__optimist:__\n\n```javascript\nvar result = require('optimist')(args)\n    .alias('h', 'help')\n    .describe('h', 'Show this help message')\n    .boolean('h')\n    .alias('f', 'foo')\n    .describe('f', 'Some helpful description for \"foo\"')\n    .string('f')\n    .alias('b', 'bar')\n    .describe('b', 'Some helpful description for \"bar\"')\n    .string('b')\n    .argv;\n```\n\n__raptor-args:__\n\n```javascript\nvar result = require('raptor-args')\n    .createParser({\n        '--help':   { type: 'string', description: 'Show this help message' },\n        '--foo -f': { type: 'string', description: 'Some helpful description for \"foo\"' },\n        '--bar -b': { type: 'string', description: 'Some helpful description for \"bar\"' }\n    })\n    .parse();\n```\n\n* [yargs](https://github.com/chevex/yargs) - A fork of `optimist` with documentation for those who speak Pirate.\n* [minimist](https://github.com/substack/minimist) - Very few features (by design). Not DRY.\n\n# TODO\n\n* Support equal separator: `--hello=world`\n* Support number arg: `-x256`\n* Detect repeated declared options and throw an error\n* Add support for a default value\n\n```javascript\nvar parser = require('../')\n    .createParser({\n        '--foo -f': {\n            type: 'boolean',\n            defaultValue: true\n        }\n    });\n```\n\n# Additional Reading\n\nFor module help, check out the test cases under the \"test\" directory.\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/raptorjs/raptor-args/issues"
  },
  "_id": "raptor-args@1.0.2",
  "dist": {
    "shasum": "252cf4e58c950a2fa087a63564bd1e8720be5e3a"
  },
  "_from": "raptor-args@^1",
  "_resolved": "http://registry.npmjs.org/raptor-args/-/raptor-args-1.0.2.tgz"
}
