{
  "name": "raptor-cache",
  "description": "Simple cache implementation",
  "keywords": [
    "AMD",
    "modules",
    "loader"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/raptorjs/raptor-cache.git"
  },
  "scripts": {
    "test": "mocha --ui bdd --reporter spec ./test && node_modules/.bin/jshint lib/"
  },
  "author": {
    "name": "Patrick Steele-Idem",
    "email": "pnidem@gmail.com"
  },
  "contributors": [
    {
      "name": "Patrick Steele-Idem",
      "email": "pnidem@gmail.com"
    },
    {
      "name": "Phillip Gates-Idem",
      "email": "phillip.idem@gmail.com"
    }
  ],
  "maintainers": "Patrick Steele-Idem <pnidem@gmail.com>",
  "dependencies": {
    "dissolve": "^0.3.3",
    "mkdirp": "^0.5.0",
    "node-uuid": "^1.4.1",
    "property-handlers": "^1.0.0",
    "raptor-logging": "^1.0.1",
    "raptor-util": "^1.0.0",
    "through": "^2.3.4",
    "raptor-async": "^1.0.0"
  },
  "devDependencies": {
    "chai": "~1.8.1",
    "jshint": "^2.5.6",
    "mocha": "~1.15.1"
  },
  "license": "Apache License v2.0",
  "bin": {},
  "main": "lib/raptor-cache.js",
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "ebay": {},
  "version": "1.1.7",
  "readme": "raptor-cache\n============\nThis module provides an caching layer that supports asynchronous reading and writing and it prevents duplicate work from being done by allowing a \"hold\" to be put on a cache entry. A common pattern when utilizing a cache is to read from the cache and to then build the cached value if it was not found in the cache. By putting a hold on a cache entry while its value is being built asynchronously, this caching layer can ensure that a value for a particular key is only built once by the current process. This module solves the challenges of working with asynchronous cache stores and provides out-of-box support for an in-memory cache and a disk-based cache. It is possible to provide a custom cache store that connects to a centralized cache such as [Redis](http://redis.io/) or [memcached](http://memcached.org/).\n\n# Installation\n\n```bash\nnpm install raptor-cache --save\n```\n\n# Example\n\n```javascript\nvar raptorCache = require('raptor-cache');\nvar cache = raptorCache.createCache({\n    store: 'disk',\n    timeToLive: 10000, // Permanently remove a cache entry after 10s (regardless of usage)\n    timeToIdle: 7000, // Permanently remove a cache entry that has not been accessed for 7s\n    freeDelay: 5000, // Free all memory after 5s of inactivity\n    \n    // Disk store specific config:\n    dir: '.cache/my-cache',\n    flushDelay: 1000, // Commit cached values to disk after 1s of no write activity\n    encoding: 'utf8'\n});\n\ncache.get(\n    'hello', // key\n    function builder(callback) { // This function will be called if the value has not been cached\n        setTimeout(function() {\n            // Respond back with the value to put in the cache\n            callback(null, 'world');\n        }, 1000)\n        \n    },\n    function callback(err, value) {\n        // value === 'world'\n    });\n\n// Request a stream to read a value:\ncache.getReadStream(\n    'hello', // key\n    function callback(err, stream) {\n        stream.pipe(process.stdin); // pipes out 'world'\n\n        // NOTE: Stream will be null if nothing was cached for key\n    });\n```\n\n# Cache Stores\n\n### Memory Store\n\nCharacteristics:\n\n- Every cache key and value is kept in memory \n\n```javascript\nvar raptorCache = require('raptor-cache');\nvar cache = raptorCache.createMemoryCache({\n    ...\n});\n```\n\n\n\n### Disk Store (Combined File)\n\nCharacteristics:\n\n- An in-memory representation of _all keys and all values_ is maintained at all times\n- The in-memory cache is backed by a disk cache that is stored in a single file\n- The cache file is read in its entirety the first time the cache is read or written to\n- Whenever the in-memory cache is modified, a flush is scheduled. If a flush had already been scheduled then it is cancelled so that\n    flushes can be batched up. Essentially, after a x delay of no activity the in-memory cache is flushed to disk\n- Values cannot be null or undefined\n\nNOTES:\n\n- This cache store is not suitable for storing very large amounts of data since it is all kept in memory\n\n\nConfiguration options:\n\n- flushDelay (int) - The amount of delay in ms after a modification to flush the updated cache to disk. -1 will disable autoamtic flushing. 0 will result in an immediate flush\n\n\n```javascript\nvar raptorCache = require('raptor-cache');\nvar cache = raptorCache.createDiskCache({\n    dir: 'some/directory',\n    singleFile: true,\n    flushDelay: 1000,\n    ...\n});\n```\n\n### Disk Store (Separate Files)\n\nCharacteristics:\n\n- Each cached value is stored in its own file (as raw bytes)\n- The cached values are not kept in memory (they can only be streamed from disk)\n- An index is maintained to keep up with what is in the cache\n- The entire index is kept in memory until the \"free\" delay is reached\n\nConfiguration options:\n\n- flushDelay (int) - The amount of delay in ms after a modification to flush the updated cache to disk. -1 will disable autoamtic flushing. 0 will result in an immediate flush\n\n```javascript\nvar raptorCache = require('raptor-cache');\nvar cache = raptorCache.createDiskCache({\n    dir: 'some/directory',\n    singleFile: false,\n    flushDelay: 1000,\n    ...\n});\n```\n\n### Composite Store\n\nCharacteristics:\n\n- One or more caches can be combined to produce a tiered cache\n- Cache keys are looked up in order\n- Cached values found in lower-tier caches are added to higher tiers\n- New cache entries are added to all tiers\n- Each individual cache can have its own settings\n\nConfiguration options:\n\n- caches (Array) - An ordered array of caches\n\n```javascript\nvar raptorCache = require('raptor-cache');\nvar cache = raptorCache.createCompositeCache({\n    caches: [\n        raptorCache.createMemoryCache(...),\n        raptorCache.createDiskCache(...),\n        ...\n    ]\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/raptorjs/raptor-cache/issues"
  },
  "homepage": "https://github.com/raptorjs/raptor-cache",
  "_id": "raptor-cache@1.1.7",
  "_from": "raptor-cache@^1.1.1"
}
