{
  "name": "optimizer-resolve-css-urls",
  "description": "Transform for the RaptorJS Optimizer to replace URLs in CSS files with optimized resources",
  "keywords": [
    "optimizer",
    "optimizer-plugin",
    "css"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/raptorjs/optimizer-resolve-css-urls.git"
  },
  "scripts": {
    "test": "jshint *.js"
  },
  "author": {
    "name": "Patrick Steele-Idem",
    "email": "pnidem@gmail.com"
  },
  "contributors": [
    {
      "name": "Patrick Steele-Idem",
      "email": "pnidem@gmail.com"
    },
    {
      "name": "Phillip Gates-Idem",
      "email": "phillip.idem@gmail.com"
    }
  ],
  "maintainers": "Patrick Steele-Idem <pnidem@gmail.com>",
  "dependencies": {
    "raptor-css-parser": "^1.0.2",
    "raptor-modules": "^1.0.6"
  },
  "devDependencies": {
    "mocha": "~1.15.1",
    "chai": "~1.8.1",
    "jshint": "^2.4.4"
  },
  "license": "Apache License v2.0",
  "bin": {},
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "main": "optimizer-resolve-css-urls-plugin.js",
  "version": "1.1.11",
  "readme": "optimizer-resolve-css-urls\n==========================\n\nTransform for the RaptorJS Optimizer to replace URLs in CSS files with optimized resources\n\n# Overview\nCSS files (which might be derived from LESS or SASS resources) often contain references to other assets.\n\nFor example:\n```css\n.app {\n    background-image: url(myfile.png);\n}\n```\n\nWhen CSS URL resolving is enabled, image assets referenced in CSS files will automatically\nbe copied to the output directory and the URL reference will be replaced with the resultant URL.\nIn the example above, the file `myfile.png` will be moved to the output directory and the URL in the CSS\nfile will be adjusted accordingly.\n\nResource URLs that begin with `data:`, `//`, `http://`, and `https://` are ignored during URL resolving.\n\nIn the typical use case, relative URLs are resolved relative to the source file. However, it is also possible\nto resolve URLs that are paths using rules of `require.resolve()`.\n\n\n# Basic Usage\n\n```javascript\nvar config = {\n    resolveCssUrls: true\n    ...\n};\n\nvar pageOptimizer = optimizer.create(config);\npageOptimizer.optimizePage(...);\n```\n\n# Custom URL Resolver\n```javascript\nvar config = {\n    resolveCssUrls: {\n      urlResolver: function(url, optimizerContext, callback) {\n        url = url.replace('SOME_TOKEN', 'something else');\n        callback(null, url);\n      }\n    }\n    ...\n};\n\nvar pageOptimizer = optimizer.create(config);\npageOptimizer.optimizePage(...);\n```\n# Using require.resolve\nConsider this CSS snippet:\n```css\n.app {\n    background-image: url(require:assets-module/images/myfile.png);\n}\n```\n\nIn this example, the actual path to `assets-module/images/myfile.png` will\nbe resolved using the rules of `require.resolve()`.\nThe path will resolved relative to the source file.\nTherefore, if the target is relative (e.g. `./myfile.png`), then the target will be\nresolved relative to the source file.\n\n# Base64 Encoding of images\nConsider this CSS snippet:\n```css\n.app {\n    background-image: url(myfile.png?base64);\n}\n```\n\nThe special \"?base64\" suffix will trigger the resolver to automatically encode\nthe image content using Base64 which will inline the data.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/raptorjs/optimizer-resolve-css-urls/issues"
  },
  "homepage": "https://github.com/raptorjs/optimizer-resolve-css-urls",
  "_id": "optimizer-resolve-css-urls@1.1.11",
  "_from": "optimizer-resolve-css-urls@^1.0.0"
}
