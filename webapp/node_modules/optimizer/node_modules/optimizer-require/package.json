{
  "name": "optimizer-require",
  "description": "RaptorJS Optimizer plugin to support Node.js style module require in the browser",
  "keywords": [
    "optimizer",
    "optimizer-plugin",
    "require",
    "commonjs",
    "modules"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/raptorjs/optimizer-require.git"
  },
  "scripts": {
    "test": "mocha --ui bdd --reporter spec ./test"
  },
  "author": {
    "name": "Patrick Steele-Idem",
    "email": "pnidem@gmail.com"
  },
  "contributors": [
    {
      "name": "Patrick Steele-Idem",
      "email": "pnidem@gmail.com"
    },
    {
      "name": "Phillip Gates-Idem",
      "email": "phillip.idem@gmail.com"
    }
  ],
  "maintainers": "Patrick Steele-Idem <pnidem@gmail.com>",
  "dependencies": {
    "assert": "^1.1.2",
    "buffer-browserify": "^0.2.2",
    "clone": "^0.1.18",
    "escodegen": "^1.6.0",
    "esprima": "^1.2.3",
    "estraverse": "^1.9.1",
    "events": "^1.0.2",
    "mkdirp": "^0.5.0",
    "path-browserify": "0.0.0",
    "process": "^0.6.0",
    "raptor-async": "^1.0.3",
    "raptor-loader": "^1.0.3",
    "raptor-logging": "^1.0.5",
    "raptor-modules": "^1.0.19",
    "raptor-polyfill": "^1.0.2",
    "raptor-promises": "^1.0.3",
    "raptor-util": "^1.0.7",
    "stream-browserify": "^1.0.0",
    "string_decoder": "^0.10.31",
    "through": "^2.3.4",
    "util": "^0.10.3"
  },
  "devDependencies": {
    "chai": "~1.8.1",
    "jshint": "~2.3.0",
    "mocha": "~1.15.1"
  },
  "license": "Apache License v2.0",
  "bin": {},
  "main": "lib/optimizer-require-plugin.js",
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "browser": {
    "buffer": "buffer-browserify",
    "path": "path-browserify",
    "stream": "stream-browserify"
  },
  "version": "1.3.2",
  "readme": "optimizer-require\n========================\n\nPlugin for the [RaptorJS Optimizer](https://github.com/raptorjs/optimizer) that adds support for transporting Node.js-style modules to the browser.\n\n# Installation\n\nThis plugin is included as part of the `optimizer` module so it is not necessary to use `npm install` to add the module to your project. However, if you want to use a specific version of the `optimizer-require` plugin then you can install it using the following command:\n\n```\nnpm install optimizer-require --save\n```\n\n# Usage\n\nThis plugin is enabled by default, but if you want to provide your own configuration then you can do that using code similar to the following:\n\n```javascript\nrequire('optimizer').configure({\n    plugins: [\n        {\n            plugin: 'optimizer-require',\n            config: {\n                transforms: [ // Browserify compatible transforms\n                    'deamdify'\n                ]\n            }\n        }\n    ]\n})\n```\n\nThe `optimizer-require` plugin introduces two new dependency types that you can use to target Node.js modules for the browser. There usage is shown in the following `optimizer.json` file:\n\n```json\n{\n    \"dependencies\": [\n        \"require: jquery\",\n        \"require-run: ./main\"\n    ]\n}\n```\n\n\nThese new dependency types are described in more detail below.\n\n# Dependency Types\n\n## require\n\nThe `require` dependency type will wrap a Node.js module for delivery to the browser and allow it to be required from another module. For example:\n\n__Input modules:__\n\n_foo.js:_\n```javascript\nexports.add = function(a, b) {\n    return a + b;\n}\n```\n\n_bar.js:_\n```javascript\nvar foo = require('./foo');\n\nexports.sayHello = function() {\n    console.log('Hello World! 2+2=' + foo.add(2, 2));\n};\n```\n\n__Output Bundles:__\n\nAfter running the following command:\n\n```bash\noptimizer require:./foo require:./bar --name test\n```\n\nThe output written to `static/test.js` will be the following:\n\n```javascript\n$rmod.def(\"/foo\", function(require, exports, module, __filename, __dirname) { exports.add = function(a, b) {\n    return a + b;\n} });\n$rmod.def(\"/bar\", function(require, exports, module, __filename, __dirname) { var foo = require('./foo');\n\nexports.sayHello = function() {\n    console.log('Hello World! 2+2=' + foo.add(2, 2));\n}; });\n```\n\n__NOTE:__ `$rmod` is a global introduced by the [client-side Node.js module loader](https://github.com/raptorjs/raptor-modules/blob/master/client/lib/raptor-modules-client.js). It should never be used directly!. The code that declares `$rmod` is not shown in the output above for brevity.\n\n## require-run\n\nIn the previous examples, neither the `foo.js` or `bar.js` module will actually run. The `require-run` dependency type should be used to make a module self-executing. This is the equivalent of the entry point for your application when loaded in the browser.\n\nContinuing with the previous example:\n\n__Input modules:__\n\n_foo.js_\n(see above)\n\n_bar.js_\n(see above)\n\n_main.js:_\n```javascript\nrequire('./bar').sayHello();\n```\n\n__Output Bundles:__\n\nAfter running the following command:\n\n```bash\noptimizer require-run:./main --name test\n```\n\nAlternatively:\n```bash\noptimizer --main main.js --name test\n```\n\nThe output written to `static/test.js` will be the following:\n\n```javascript\n$rmod.def(\"/foo\", function(require, exports, module, __filename, __dirname) { exports.add = function(a, b) {\n    return a + b;\n} });\n\n$rmod.def(\"/bar\", function(require, exports, module, __filename, __dirname) { var foo = require('./foo');\n\nexports.sayHello = function() {\n    console.log('Hello World! 2+2=' + foo.add(2, 2));\n}; });\n\n$rmod.run(\"/main\", function(require, exports, module, __filename, __dirname) { require('./bar').sayHello(); });\n```\n\n## Conditional Remap\n\nThe `optimizer-require` supports the [package.json browser field](https://gist.github.com/defunctzombie/4339901) for remapping a JavaScript module to a different module during client-side bundling. For example:\n\n```json\n{\n    \"browser\": {\n        \"./foo.js\": \"./foo-browser.js\"\n    }\n}\n```\n\nThe `optimizer-require` plugin also allows modules to be conditionally remapped based on the set of enabled flags by adding additional information an `optimizer.json` in the same directory as a module. For example:\n\n```json\n{\n    \"dependencies\": [\n        ...\n    ],\n    \"requireRemap\": [\n        {\n            \"from\": \"./foo.js\",\n            \"to\": \"./foo-mobile.js\",\n            \"if-flag\": \"mobile\"\n        }\n    ]\n}\n```\n\nIf the `mobile` flag is set during optimization and the `foo.js` module is required on the client (e.g., `require('./foo')`) then the returned module will be the exports for `foo-mobile.js` (not `foo.js`).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/raptorjs/optimizer-require/issues"
  },
  "homepage": "https://github.com/raptorjs/optimizer-require",
  "_id": "optimizer-require@1.3.2",
  "_from": "optimizer-require@^1.0.0"
}
